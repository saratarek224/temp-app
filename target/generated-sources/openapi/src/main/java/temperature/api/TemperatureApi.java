/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package temperature.api;

import temperature.api.dto.ErrorResponse;
import temperature.api.dto.SuccessResponse;
import temperature.api.dto.TemperatureDTO;
import temperature.api.dto.TemperatureItemDTO;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-06-11T23:22:24.261440336+02:00[Africa/Cairo]")
@Validated
@Api(value = "temperature", description = "the temperature API")
public interface TemperatureApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /temperature : Create temperature
     *
     * @param body  (optional)
     * @return Success Response (status code 201)
     *         or Bad request (status code 400)
     *         or Invalid Token (status code 401)
     */
    @ApiOperation(value = "Create temperature", nickname = "createTemperature", notes = "", response = SuccessResponse.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success Response", response = SuccessResponse.class),
        @ApiResponse(code = 400, message = "Bad request", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "Invalid Token", response = ErrorResponse.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/temperature",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SuccessResponse> createTemperature(@ApiParam(value = "") @Valid @RequestBody(required = false) String body) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"details\" : \"details\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /temperature : List temperature items
     *
     * @return ok (status code 200)
     *         or Bad request (status code 400)
     *         or Invalid Token (status code 401)
     */
    @ApiOperation(value = "List temperature items", nickname = "getTemperature", notes = "", response = TemperatureDTO.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "ok", response = TemperatureDTO.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad request", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "Invalid Token", response = ErrorResponse.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/temperature",
        produces = { "application/json" }
    )
    default ResponseEntity<List<TemperatureDTO>> getTemperature() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /temperature/{id} : get temperature item
     *
     * @param id  (required)
     * @return ok (status code 200)
     *         or Bad request (status code 400)
     *         or Invalid Token (status code 401)
     */
    @ApiOperation(value = "get temperature item", nickname = "getTemperatureItem", notes = "", response = TemperatureItemDTO.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "ok", response = TemperatureItemDTO.class),
        @ApiResponse(code = 400, message = "Bad request", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "Invalid Token", response = ErrorResponse.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/temperature/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<TemperatureItemDTO> getTemperatureItem(@ApiParam(value = "", required = true) @PathVariable("id") Long id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
